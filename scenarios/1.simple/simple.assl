procedure init(gridWidth : Integer, gridHeight : Integer, DNB : Integer, RNB : Integer)

var drones : Sequence(Drone),
    targets : Sequence(Target),
    nodes : Sequence(Node),
    warehouse : Warehouse,
    globalState : GlobalState,
    xRange : Sequence(Integer),
    yRange : Sequence(Integer);

begin
    -- Create objects
    drones := CreateN(Drone, [DNB]);
    targets := CreateN(Target, [RNB]);
    nodes := CreateN(Node, [gridWidth * gridHeight - RNB - 1]);
    warehouse := Create(Warehouse);
    globalState := Create(GlobalState);
    xRange := [Sequence{1..gridWidth}];
    yRange := [Sequence{1..gridHeight}];

    -- Populate state
    [globalState].DNB := [DNB];
    [globalState].RNB := [RNB];
    [globalState].elapsedTime := [0];

    -- Populate grid
    for target:Target in [targets]
    begin
      [target].x := Try([xRange]);
      [target].y := Try([yRange]);
      [target].RCAP := Any([Sequence{1000..5000}]);
      [target].state := [TargetState::Empty];
    end;

    [warehouse].x := Try([xRange]);
    [warehouse].y := Try([yRange]);


    for node:Node in [nodes]
    begin
      [node].x := Try([xRange]);
      [node].y := Try([yRange]);
    end;

    -- Populate drones
    for drone:Drone in [drones]
    begin
      [drone].DCAP := Any([Sequence{1000..5000}]);
      [drone].charge := [3];
      [drone].pathIdx := [0];
      [drone].state := [DroneState::Boarding];
      [drone].isActing := [false];
      Insert(DroneLocation, [warehouse], [drone]);
    end;
end;

procedure newOrder()
var products : Sequence(Product),
    order : Order,
    target : Target,
    nbProducts : Integer;

begin
  nbProducts := Any([Sequence{1..5}]);
  order := Create(Order);
  products := CreateN(Product, [nbProducts] );
  target := Any([Target.allInstances()->asSequence()]);

  for product:Product in [products]
  begin
    [product].weight := Any([Sequence{0..20}]);
    Insert(CarriedProducts, [order], [product]);
  end;

  [order].state := [OrderState::Waiting];
  Insert(OrderProduct, [target], [order]);
end;
