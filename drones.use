model Drones

-- Enumerate States
enum TargetState {Charging, Receiving, Empty}
enum DroneState {Boarding, Charging, Moving, Delivering}
enum OrderState {Waiting, InProcess, Done}

-- Classes
class Node
attributes
  x : Integer
  y : Integer

operations
  distanceWith(node : Node) : Integer =
    -- Manhattan Distance
    (x-node.x).abs() + (y-node.y).abs()
  computePathTo(node : Node) : OrderedSet(Node)
end

class Warehouse < Node end

class Target < Node
attributes
  state : TargetState
  RCAP : Integer

operations
  charge()
  receive()
  free()

statemachines
  psm TargetStateMachine
  states
    Boot:initial
    Charging
    Receiving
    Empty
  transitions
    Boot -> Empty {create}
    Empty -> Receiving {receive()}
    Receiving -> Charging {charge()}
    Charging -> Empty {free()}
    Empty -> Charging {charge()}
  end
end

class Drone
attributes
  state : DroneState
  DCAP : Integer
  charge : Integer
  isActing : Boolean
  pathIdx : Integer

operations
  next() : Node =
    -- If it has an order in progress
    if(self.orders->exists(o|o.state=OrderState::InProcess))
    then
      -- Move forward to the next node in path
      self.path->at((self.pathIdx+1).min(self.path->size()))
    else
      -- Move backwards to the previous node in path
      self.path->at(1.max(self.pathIdx-1))
    endif
  doNothing()
  move()
  charge()
  deliver()
  board()

statemachines
  psm DroneStateMachine
  states
    Boot:initial
    Boarding
    Moving
    Charging
    Delivering
  transitions
    Boot -> Boarding {create}
    Boarding -> Moving {move()}
    Moving -> Boarding {board()}
    Boarding -> Charging {charge()}
    Moving -> Charging {charge()}
    Charging -> Moving {move()}
    Moving -> Delivering {deliver()}
    Delivering -> Moving {move()}
    Delivering -> Charging {charge()}
  end
end



class Order
attributes
  state : OrderState

operations
  load() : Integer
  deliver()
  associateTo(drone : Drone)

statemachines
  psm OrderStateMachine
  states
    Boot:initial
    Waiting
    InProcess
    Done
  transitions
    Boot -> Waiting {create}
    Waiting -> InProcess {associateTo()}
    InProcess -> Done {deliver()}
  end
end

class Product
attributes
  weight : Integer
end

class GlobalState
attributes
  elapsedTime : Integer
  DNB : Integer
  RNB : Integer

operations
  init()
  tick()
end

association Path between
  Drone [0..1] role movingDrone
  Node [*] role path ordered
end

association DroneLocation between
  Node [1] role location
  Drone [*] role drones
end

association DroneOrders between
  Drone [0..1] role drone
  Order [*] role orders
end

association OrderProduct between
  Target [1] role location
  Order [*] role orders
end

association CarriedProducts between
  Order [1] role order
  Product [*] role products
end

constraints

--Il ya DNB drones et RNB receptacles
context GlobalState
inv droneNumbers : Drone.allInstances()->size() = self.DNB 
inv targetNumbers : Target.allInstances()->size() = self.RNB 
inv positiveElapsedTime : self.elapsedTime >= 0 

--A un moment au plus un drone peut interagir avec un Receptacle (fait dans les associations)
--A un moment donné il y'a au plus un drone sur une case de la grille (fait dans les associations)

context Node
inv positiveX : self.x >= 0
inv positiveY : self.y >= 0
-- Un noeud par case
inv SingleNodePerCase : Node.allInstances()->select(n | n.x = self.x and n.y = self.y )->size() = 1
-- Un Noeud possede entre 0 et 4 voisins
inv successors : Node.allInstances()->select(n | (n.x = self.x - 1 and n.y = self.y) or (n.x = self.x+1 and n.y = self.y) or (n.x = self.x and n.y = self.y -1) or (n.x = self.y and n.y = self.y+1))->size()<=4
--Un drone par case sauf pour la warehouse
inv oneDronePerNode : not(self.oclIsTypeOf(Warehouse)) implies self.drones->size() <= 1 


context Drone
inv batteryCapacity : self.charge <= 3 and self.charge>=0
inv positiveCapacity : self.DCAP >= 0 
inv ordersNotHeavierThanCapacity : self.orders.products.weight->sum() <= self.DCAP

context Order 

context Product 
inv positiveWeight : self.weight >= 0 

context Target 
inv positiveRCAP : self.RCAP >= 0 
--Condition 14 séparée en deux
--Deux receptacles sont séparés d'une distance inférieure ou egale a 2 (receptacle actuel et un autre)
--Il existe un receptacle a une distance de deux de l'entrepot (faite plutard)
inv targetDistance : Target.allInstances()->excluding(self)->exists(r| ((self.x-r.x).abs()+(self.y-r.y).abs() <= 2) ) or Target.allInstances()->size() = 1

context Warehouse
--Il existe un entrepot
inv oneWarehouse : Warehouse.allInstances()->size() = 1
--Il existe au moins un receptacle voisin de l’entrepot.
inv targetCloseToWareHouse : Target.allInstances()->exists(r | (self.x-r.x).abs()+(self.y-r.y).abs() = 1 )
--Un receptacle ne peut etre sur la meme case qu'un warehouse
inv wareHouseDifferentFromTarget : Target.allInstances()->forAll(r| not(self.x=r.x and self.y=r.y) )


--A un moment au plus un drone peut interagir avec un Receptacle
--A un moment donne il y a au plus un drone a chaque intersection de la grille.

-- Operations

-- Etat initial du systeme
context GlobalState::init()
post dronesInWarehouse: let w=Warehouse.allInstances().any(true) in Drone.allInstances()->forAll(d | d.location = w)
post initTime: self.elapsedTime = 0
post actingDrones: Drone.allInstances()->forAll(d | d.isActing)

-- Avance dans le temps
context GlobalState::tick()
-- Les drones sont actifs avant de bouger
pre actingDrones: Drone.allInstances()->forAll(d | d.isActing)
post incTime: self.elapsedTime = self.elapsedTime@pre + 1
-- Les drones ont bougé, ils sont inactifs
post idleDrones: Drone.allInstances()->forAll(d | not d.isActing)

-- Actions du drone

context Drone::doNothing()
post sameState: self = self@pre

context Drone::move()
pre mustBeActing: self.isActing
pre mustHaveCharge: self.charge > 0
pre emptyNextNode: self.next().drones->size = 0
pre mustBeMoving: self.state = DroneState::Moving
post hasMovedToNext: self.location = self@pre.next()
post consumeCharge: self.charge = self.charge@pre - 1

context Drone::charge()
pre mustBeActing: self.isActing
pre mustBeUnderMaxCharge: self.charge < 3
pre mustbeonTarget: Target.allInstances()->exists(t | t = self.location)
post mustBeCharging: self.state = DroneState::Charging
post incCharge: self.charge = self.charge@pre + 1

context Drone::deliver()
pre mustBeActing: self.isActing
pre inDeliveringLocation: self.orders->exists(o | o.state = OrderState::InProcess and o.location = self.location)
post mustBeDelivering: self.state = DroneState::Delivering
post updateDeliveryStatus: self.orders->exists(o | o.state@pre = OrderState::InProcess and o.location = self.location and o.state = OrderState::Done)

context Drone::board()
pre mustBeActing: self.isActing
pre inWarehouse: Warehouse.allInstances()->exists(w | self.location = w)
post mustBeBoarding: self.state = DroneState::Boarding
post mustHaveChangedOrderState: self.orders->exists(o | o.state = OrderState::InProcess and o.state@pre = OrderState::Waiting)

