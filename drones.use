model Drones

class Node
attributes
  x : Integer
  y : Integer
operations
  distanceWith(node : Node) : Integer
  computePathTo(node : Node) : OrderedSet(Node)
end

class Warehouse < Node end

enum TargetState {reloading, recepting, empty}

class Target < Node
attributes
  state : TargetState
  RCAP : Integer
operations
  reloadDrone()
  receiveOrder()
  free()
end

enum DroneState {inWarehouse, charging, moving, delivering}

class Drone
attributes
  state : DroneState
  DCAP : Integer
  charge : Integer
  isActing : Boolean
operations
  next() : Node
  doNothing()
  move()
  reload()
  deliver()
  goBackToWarehouse()
  reloadInWarehouse()
  exitWarehouse()
end

enum OrderState {waiting, inProcess, done}

class Order
attributes
  state : OrderState
operations
  load() : Integer
  deliver()
  associateTo(drone : Drone)
end

class Product
attributes
  weight : Integer
end

class GlobalState
attributes
  elapsedTime : Integer
  DNB : Integer
  RNB : Integer
operations
  init()
  tick()
end

association Path between
  Drone [0..1] role movingDrone
  Node [*] role path ordered
end

association DroneLocation between
  Node [1] role location
  Drone [0..1] role drone
end

association OrderLocation between
  Target [1] role location
  Order [0] role orders
end

association CarriedProducts between
  Order [1] role order
  Product [*] role products
end

constraints

-- A un moment au plus un drone peut interagir avec un Receptacle
-- Il existe au moins un Receptacle voisin de lentrepot
— Pour chaque réceptacle, il existe un chemin partant de l’entrepôt et menant à
ce réceptacle en passant par un ensemble d’autres réceptacles tel que la distance
entre tout couple d’éléments consécutifs de ce chemin soit inférieure ou égale à 2.
—- A un moment donne, il y a au plus un drone a chaque intersection de la grille.

